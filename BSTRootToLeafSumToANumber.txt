// root to leaf path equal to a number
#include <iostream>
using namespace std;

class bst
{
	struct Node
	{
		int data;
		Node *left;
		Node *right;
	}*root;

	void insert(Node *root, Node *temp);
	void display(Node *root);
	bool checkSum(Node *root, int sum);
public:
	void insert(int num);
	void display();
	bool checkSum(int sum);
	bst();
};

bool bst::checkSum(int sum)
{
	return checkSum(root, sum);
}

bool bst::checkSum(Node *root, int sum)
{
	if (root == NULL)
		return (sum == 0);
	else
	{
		bool ans = 0;
		int subSum = sum - root->data;
		if (subSum == 0 && root->left == NULL && root->right == NULL)
			return true;
		if (root->left)
			ans = ans || checkSum(root->left, subSum);
			
		if (root->right)
			ans = ans || checkSum(root->right, subSum);
		return ans;
	}
}

void bst::display()
{
	display(root);
}

void bst::display(Node *root)
{
	if (root == NULL)
		return;
	display(root->left);
	cout << root->data << " ";
	display(root->right);
}

void bst::insert(int num)
{
	Node *temp = new Node;
	temp->data = num;
	temp->right = NULL;
	temp->left = NULL;
	if (root == NULL)
		root = temp;
	else
		insert(root, temp);
}


void bst::insert(Node *root, Node *temp)
{
	if (temp->data > root->data)
	{
		if (root->right != NULL)
		{
			insert(root->right, temp);
		}
		else
			root->right = temp;
	}
	else
	{
		if (root->left != NULL)
		{
			insert(root->left, temp);
		}
		else
			root->left = temp;
	}

}

bst::bst()
{
	root = NULL;
}

int main()
{
	bst b1;
	b1.insert(15);
	b1.insert(10);
	b1.insert(4);
	b1.insert(34);
	b1.insert(12);
	b1.insert(9);
	b1.display();
	cout << b1.checkSum(37);


}